services:
  traefik-init-http: &traefik-init-http
    profiles: [http]
    image: docker.io/alpine/curl:latest
    command:
      - sh
      - -c
      - |
        cat <<EOF > /traefik_config/dynamic.yml
        http:
          routers:
            rocketchat:
              entryPoints:
                - http
              service: rocketchat
              rule: "Host(\`${DOMAIN:-localhost}\`)"
            grafana:
              entryPoints:
                - http
              rule: "Host(\`${GRAFANA_DOMAIN:-grafana.localhost}\`)"
              service: grafana
          services:
            rocketchat:
              loadBalancer:
                servers:
                  - url: "http://rocketchat:3000"
            grafana:
              loadBalancer:
                servers:
                  - url: "http://grafana:3000"
        EOF
    volumes:
      - traefik_config:/traefik_config:rw
    restart: "no"

  traefik-init-https:
    <<: *traefik-init-http
    profiles: [https]
    command:
      - sh
      - -c
      - |
        cat <<EOF > /traefik_config/dynamic.yml
        entrypoints:
          https:
            address: ":443"
            http:
              redirections:
                entryPoint:
                  to: "http"
                  scheme: "https"
        http:
          routers:
            rocketchat:
              entryPoints:
                - https
              service: rocketchat
              rule: "Host(\`${DOMAIN:-localhost}\`)"
              tls:
                certResolver: le
            grafana:
              entryPoints:
                - https
              rule: "Host(\`${GRAFANA_DOMAIN:-grafana.localhost}\`)"
              service: grafana
              tls:
                certResolver: le
          services:
            rocketchat:
              loadBalancer:
                servers:
                  - url: "http://rocketchat:3000"
            grafana:
              loadBalancer:
                servers:
                  - url: "http://grafana:3000"
        EOF
    volumes:
      - traefik_config:/traefik_config:rw

  traefik-wait-for-config:
    profiles: [http, https]
    image: docker.io/alpine/curl:latest
    restart: "no"
    volumes:
      - traefik_config:/traefik_config:rw
    command:
      - sh
      - -c
      - |
        max=30
        count=0
        while [ ! -f /traefik_config/dynamic.yml ] && [ $$count -lt $$max ]; do
          echo "Waiting for /traefik_config/dynamic.yml to be created..."
          sleep 1
          count=$$((count + 1))
        done
        if [ $$count -eq $$max ]; then
          echo "Timed out waiting for /traefik_config/dynamic.yml"
          exit 1
        else
          echo "/traefik_config/dynamic.yml is ready."
        fi

  traefik:
    profiles: [traefik]
    image: docker.io/traefik:${TRAEFIK_RELEASE:-v3.4}
    restart: always
    depends_on:
      traefik-wait-for-config:
        condition: service_completed_successfully
    command:
      - --api.insecure=${TRAEFIK_API_INSECURE:-false}
      - --providers.docker=false
      - --providers.docker.exposedbydefault=false
      - --entrypoints.http.address=:${TRAEFIK_HTTP_PORT:-80}
      - --entrypoints.https.address=:${TRAEFIK_HTTPS_PORT:-443}
      - --entrypoints.metrics.address=:8082
      - --metrics.prometheus=true
      # ssl
      - --certificatesresolvers.le.acme.tlschallenge=true
      - --certificatesresolvers.le.acme.email=${LETSENCRYPT_EMAIL?need email for cert expiry notifications}
      - --certificatesresolvers.le.acme.storage=/letsencrypt/acme.json
      # ssl
      - --metrics.prometheus.entryPoint=metrics # Associate metrics with the 'metrics' entry point
      - --metrics.prometheus.addEntryPointsLabels=true
      - --metrics.prometheus.addRoutersLabels=true
      - --metrics.prometheus.addServicesLabels=true
      - --providers.file.filename=/traefik_config/dynamic.yml
      - --providers.file.watch=true
    ports:
      - ${TRAEFIK_HTTP_PORT:-80}:${TRAEFIK_HTTP_PORT:-80}
      - ${TRAEFIK_DASHBOARD_PORT:-8080}:8080
      - ${TRAEFIK_HTTPS_PORT:-443}:${TRAEFIK_HTTPS_PORT:-443}
    expose:
      - 8082
    volumes:
      - traefik:/letsencrypt:rw
      - traefik_config:/traefik_config:rw
    # healthcheck:
    #   test: ["CMD", "traefik", "healthcheck"]
    #   interval: 30s
    #   timeout: 30s
    #   retries: 5
    #   start_period: 30s


volumes:
  traefik: { driver: local }
  traefik_config: { driver: local }